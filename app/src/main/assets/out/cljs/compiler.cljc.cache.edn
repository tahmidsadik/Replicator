;; Analyzed by ClojureScript 0.0-3479
{:use-macros {ensure cljs.env.macros, emit-wrap cljs.compiler.macros}, :excludes #{ensure munge js-reserved macroexpand-1}, :name cljs.compiler, :imports {StringBuffer goog.string.StringBuffer}, :requires {gstring goog.string, cljs.tools.reader cljs.tools.reader, goog.string goog.string, cljs.env cljs.env, ana cljs.analyzer, sm cljs.source-map, StringBuffer goog.string.StringBuffer, env cljs.env, string clojure.string, cljs.analyzer cljs.analyzer, cljs.source-map cljs.source-map, clojure.string clojure.string, reader cljs.tools.reader}, :uses nil, :defs {protocol-prefix {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 808, :column 7, :end-line 808, :end-column 22, :arglists (quote ([psym]))}, :name cljs.compiler/protocol-prefix, :variadic false, :file "out/cljs/compiler.cljc", :end-column 22, :method-params ([psym]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 808, :max-fixed-arity 1, :fn-var true, :arglists (quote ([psym]))}, emit-arguments-to-array {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 596, :column 7, :end-line 596, :end-column 30, :arglists (quote ([startslice])), :doc "Emit code that copies function arguments into an array starting at an index.\n  Returns name of var holding the array."}, :name cljs.compiler/emit-arguments-to-array, :variadic false, :file "out/cljs/compiler.cljc", :end-column 30, :method-params ([startslice]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 596, :max-fixed-arity 1, :fn-var true, :arglists (quote ([startslice])), :doc "Emit code that copies function arguments into an array starting at an index.\n  Returns name of var holding the array."}, distinct-keys? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 330, :column 7, :end-line 330, :end-column 21, :arglists (quote ([keys]))}, :name cljs.compiler/distinct-keys?, :variadic false, :file "out/cljs/compiler.cljc", :end-column 21, :method-params ([keys]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 330, :max-fixed-arity 1, :fn-var true, :arglists (quote ([keys]))}, munge {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 76, :column 7, :end-line 76, :end-column 12, :arglists (quote ([s] [s reserved])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s reserved]), :arglists ([s] [s reserved]), :arglists-meta (nil nil)}}, :name cljs.compiler/munge, :variadic false, :file "out/cljs/compiler.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s reserved]), :arglists ([s] [s reserved]), :arglists-meta (nil nil)}, :method-params ([s] [s reserved]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s reserved])}, get-define {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 494, :column 7, :end-line 494, :end-column 17, :arglists (quote ([mname jsdoc]))}, :name cljs.compiler/get-define, :variadic false, :file "out/cljs/compiler.cljc", :end-column 17, :method-params ([mname jsdoc]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 494, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mname jsdoc]))}, comma-sep {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 113, :column 8, :end-line 113, :end-column 17, :private true, :arglists (quote ([xs]))}, :private true, :name cljs.compiler/comma-sep, :variadic false, :file "out/cljs/compiler.cljc", :end-column 17, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, ns-first-segments {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 45, :column 7, :end-line 45, :end-column 24, :arglists (quote ([]))}, :name cljs.compiler/ns-first-segments, :variadic false, :file "out/cljs/compiler.cljc", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, valid-define-value? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 488, :column 7, :end-line 488, :end-column 26, :arglists (quote ([x]))}, :name cljs.compiler/valid-define-value?, :variadic false, :file "out/cljs/compiler.cljc", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 488, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, emits-keyword {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 238, :column 7, :end-line 238, :end-column 20, :arglists (quote ([kw]))}, :name cljs.compiler/emits-keyword, :variadic false, :file "out/cljs/compiler.cljc", :end-column 20, :method-params ([kw]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kw]))}, *lexical-renames* {:name cljs.compiler/*lexical-renames*, :file "out/cljs/compiler.cljc", :line nil, :column nil, :end-line 41, :end-column 33, :dynamic true, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 41, :column 16, :end-line 41, :end-column 33, :dynamic true}}, emit-let {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 761, :column 7, :end-line 761, :end-column 15, :arglists (quote ([{:keys [bindings expr env]} is-loop]))}, :name cljs.compiler/emit-let, :variadic false, :file "out/cljs/compiler.cljc", :end-column 15, :method-params ([p__9860 is-loop]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 761, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [bindings expr env]} is-loop]))}, cljs-reserved-file-names {:name cljs.compiler/cljs-reserved-file-names, :file "out/cljs/compiler.cljc", :line nil, :column nil, :end-line 43, :end-column 30, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 43, :column 6, :end-line 43, :end-column 30}}, emit-variadic-fn-method {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 610, :column 7, :end-line 610, :end-column 30, :arglists (quote ([{:keys [type name variadic params expr env recurs max-fixed-arity], :as f}]))}, :name cljs.compiler/emit-variadic-fn-method, :variadic false, :file "out/cljs/compiler.cljc", :end-column 30, :method-params ([p__9652]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 610, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [type name variadic params expr env recurs max-fixed-arity], :as f}]))}, js-reserved {:name cljs.compiler/js-reserved, :file "out/cljs/compiler.cljc", :line nil, :column nil, :end-line 36, :end-column 17, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 36, :column 6, :end-line 36, :end-column 17}}, emits {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 168, :column 7, :end-line 168, :end-column 12, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name cljs.compiler/emits, :variadic true, :file "out/cljs/compiler.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 168, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, emit-constant {:name cljs.compiler/emit-constant, :file "out/cljs/compiler.cljc", :line nil, :column nil, :end-line 199, :end-column 27, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 199, :column 14, :end-line 199, :end-column 27}}, emit-constants-table {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 1282, :column 7, :end-line 1282, :end-column 27, :arglists (quote ([table]))}, :name cljs.compiler/emit-constants-table, :variadic false, :file "out/cljs/compiler.cljc", :end-column 27, :method-params ([table]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([table]))}, escape-string {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 134, :column 8, :end-line 134, :end-column 21, :private true, :arglists (quote ([s]))}, :private true, :name cljs.compiler/escape-string, :variadic false, :file "out/cljs/compiler.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, emit-fn-params {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 574, :column 7, :end-line 574, :end-column 21, :arglists (quote ([params]))}, :name cljs.compiler/emit-fn-params, :variadic false, :file "out/cljs/compiler.cljc", :end-column 21, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 574, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, munge-reserved {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 70, :column 7, :end-line 70, :end-column 21, :arglists (quote ([reserved]))}, :name cljs.compiler/munge-reserved, :variadic false, :file "out/cljs/compiler.cljc", :end-column 21, :method-params ([reserved]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reserved]))}, fn-self-name {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 60, :column 7, :end-line 60, :end-column 19, :arglists (quote ([{:keys [name info], :as name-var}]))}, :name cljs.compiler/fn-self-name, :variadic false, :file "out/cljs/compiler.cljc", :end-column 19, :method-params ([p__9176]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [name info], :as name-var}]))}, load-libs {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 918, :column 7, :end-line 918, :end-column 16, :arglists (quote ([libs seen reloads]))}, :name cljs.compiler/load-libs, :variadic false, :file "out/cljs/compiler.cljc", :end-column 16, :method-params ([libs seen reloads]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 918, :max-fixed-arity 3, :fn-var true, :arglists (quote ([libs seen reloads]))}, emit* {:name cljs.compiler/emit*, :file "out/cljs/compiler.cljc", :line nil, :column nil, :end-line 144, :end-column 16, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 144, :column 11, :end-line 144, :end-column 16}}, array-map-threshold {:name cljs.compiler/array-map-threshold, :file "out/cljs/compiler.cljc", :line nil, :column nil, :end-line 328, :end-column 35, :private true, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 328, :column 16, :end-line 328, :end-column 35, :private true}}, emit-fn-method {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 581, :column 7, :end-line 581, :end-column 21, :arglists (quote ([{:keys [type name variadic params expr env recurs max-fixed-arity]}]))}, :name cljs.compiler/emit-fn-method, :variadic false, :file "out/cljs/compiler.cljc", :end-column 21, :method-params ([p__9649]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 581, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [type name variadic params expr env recurs max-fixed-arity]}]))}, emit-comment {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 472, :column 7, :end-line 472, :end-column 19, :arglists (quote ([doc jsdoc])), :doc "Emit a nicely formatted comment string."}, :name cljs.compiler/emit-comment, :variadic false, :file "out/cljs/compiler.cljc", :end-column 19, :method-params ([doc jsdoc]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 472, :max-fixed-arity 2, :fn-var true, :arglists (quote ([doc jsdoc])), :doc "Emit a nicely formatted comment string."}, wrap-in-double-quotes {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 141, :column 8, :end-line 141, :end-column 29, :private true, :arglists (quote ([x]))}, :private true, :name cljs.compiler/wrap-in-double-quotes, :variadic false, :file "out/cljs/compiler.cljc", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, emit-apply-to {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 539, :column 7, :end-line 539, :end-column 20, :arglists (quote ([{:keys [name params env]}]))}, :name cljs.compiler/emit-apply-to, :variadic false, :file "out/cljs/compiler.cljc", :end-column 20, :method-params ([p__9531]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 539, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [name params env]}]))}, falsey-constant? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 417, :column 7, :end-line 417, :end-column 23, :arglists (quote ([{:keys [op form]}]))}, :name cljs.compiler/falsey-constant?, :variadic false, :file "out/cljs/compiler.cljc", :end-column 23, :method-params ([p__9364]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 417, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [op form]}]))}, build-affecting-options {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 1048, :column 8, :end-line 1048, :end-column 31, :private true, :arglists (quote ([opts]))}, :private true, :name cljs.compiler/build-affecting-options, :variadic false, :file "out/cljs/compiler.cljc", :end-column 31, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1048, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}, *source-map-data* {:name cljs.compiler/*source-map-data*, :file "out/cljs/compiler.cljc", :line nil, :column nil, :end-line 40, :end-column 33, :dynamic true, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 40, :column 16, :end-line 40, :end-column 33, :dynamic true}}, *inputs* {:name cljs.compiler/*inputs*, :file "out/cljs/compiler.cljc", :line nil, :column nil, :end-line 39, :end-column 24, :dynamic true, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 39, :column 16, :end-line 39, :end-column 24, :dynamic true}}, escape-char {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 116, :column 8, :end-line 116, :end-column 19, :private true, :arglists (quote ([c]))}, :private true, :name cljs.compiler/escape-char, :variadic false, :file "out/cljs/compiler.cljc", :end-column 19, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, emit-str {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 193, :column 15, :end-line 193, :end-column 23, :tag String, :arglists (quote ([expr]))}, :name cljs.compiler/emit-str, :variadic false, :file "out/cljs/compiler.cljc", :end-column 23, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag String, :end-line 193, :max-fixed-arity 1, :tag String, :fn-var true, :arglists (quote ([expr]))}, truthy-constant? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 411, :column 7, :end-line 411, :end-column 23, :arglists (quote ([{:keys [op form]}]))}, :name cljs.compiler/truthy-constant?, :variadic false, :file "out/cljs/compiler.cljc", :end-column 23, :method-params ([p__9361]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 411, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [op form]}]))}, emitln {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 182, :column 7, :end-line 182, :end-column 13, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name cljs.compiler/emitln, :variadic true, :file "out/cljs/compiler.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 182, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, emit {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 146, :column 7, :end-line 146, :end-column 11, :arglists (quote ([ast]))}, :name cljs.compiler/emit, :variadic false, :file "out/cljs/compiler.cljc", :end-column 11, :method-params ([ast]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ast]))}, safe-test? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 421, :column 7, :end-line 421, :end-column 17, :arglists (quote ([env e]))}, :name cljs.compiler/safe-test?, :variadic false, :file "out/cljs/compiler.cljc", :end-column 17, :method-params ([env e]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 421, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env e]))}, distinct-constants? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 375, :column 7, :end-line 375, :end-column 26, :arglists (quote ([items]))}, :name cljs.compiler/distinct-constants?, :variadic false, :file "out/cljs/compiler.cljc", :end-column 26, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 375, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items]))}, *dependents* {:name cljs.compiler/*dependents*, :file "out/cljs/compiler.cljc", :line nil, :column nil, :end-line 38, :end-column 28, :dynamic true, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 38, :column 16, :end-line 38, :end-column 28, :dynamic true}}, shadow-depth {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/compiler.cljc", :line 50, :column 7, :end-line 50, :end-column 19, :arglists (quote ([s]))}, :name cljs.compiler/shadow-depth, :variadic false, :file "out/cljs/compiler.cljc", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}}, :require-macros {cljs.compiler.macros cljs.compiler.macros, cljs.env.macros cljs.env.macros}, :cljs.analyzer/constants {:seen #{:args :cljs.analyzer/namespaces :gline :finally :statement :ret :var-special :ctor :recurs :js :let :v :protocol-inline :fn :closure-defines :meta :static-fns :frame :fn-scope :do :pmasks :init :exprs :else :optimize-constants :protocol :if :locals :tests :return :method :use :segs :default :new :protocols :ns :bindings :elide-asserts :def-emits-var :name :binding-form? :variadic :flag :constant :loop-lets :unchecked :fields :optimizations :require :params :js-value :js-module-index :fn-self-name :deftype* :val :recur :field :type :method-params :vals :op :env :letfn :vector :export :js-type :cljs.analyzer/constant-table :sym :no-op :column :loop :requires :keys :thens :set! :methods :dynamic :line :expr :list :var :uses :catch :recur-frames :info :code :then :source-map :var-ast :context :invoke :throw :gcol :reload :f :def :reload-all :require-macros :max-fixed-arity :t :case* :options :form :dot :target :reloads :try :set :items :fn-var :defrecord* :hierarchy :shadow :body :doc :jsdoc :map :gen-line :object :test :none :emit-constants :gen-col :statements}, :order [:cljs.analyzer/namespaces :name :info :shadow :else :ns :fn-scope :field :fn-self-name :hierarchy :op :default :env :line :column :gcol :gline :gen-col :gen-line :var :source-map :emit-constants :options :cljs.analyzer/constant-table :no-op :form :js-module-index :binding-form? :statement :context :return :expr :var-special :sym :meta :constant :map :keys :vals :list :items :vector :set :js-value :js-type :object :if :test :then :unchecked :case* :v :tests :thens :throw :optimizations :none :closure-defines :def :init :doc :jsdoc :export :var-ast :def-emits-var :params :type :variadic :recurs :max-fixed-arity :fn :methods :recur-frames :loop-lets :flag :do :statements :ret :try :catch :finally :bindings :let :loop :recur :frame :exprs :letfn :invoke :f :args :dynamic :fn-var :protocol :protocol-inline :protocols :locals :method-params :new :ctor :set! :target :val :reload-all :reload :requires :uses :require-macros :reloads :require :use :deftype* :t :fields :pmasks :body :defrecord* :dot :method :js :code :segs :static-fns :optimize-constants :elide-asserts]}, :doc nil}