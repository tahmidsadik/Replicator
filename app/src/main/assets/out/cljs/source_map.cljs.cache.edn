;; Analyzed by ClojureScript 0.0-3464
{:use-macros nil, :excludes #{}, :name cljs.source-map, :imports nil, :requires {string clojure.string, clojure.string clojure.string, set clojure.set, clojure.set clojure.set, base64-vlq cljs.source-map.base64-vlq, cljs.source-map.base64-vlq cljs.source-map.base64-vlq}, :uses nil, :defs {indexed-sources {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/source_map.cljs", :line 33, :column 7, :end-line 33, :end-column 22, :arglists (quote ([sources])), :doc "Take a seq of source file names and return a map from\n   file number to integer index. For reverse source maps."}, :name cljs.source-map/indexed-sources, :variadic false, :file "out/cljs/source_map.cljs", :end-column 22, :method-params ([sources]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sources])), :doc "Take a seq of source file names and return a map from\n   file number to integer index. For reverse source maps."}, source-compare {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/source_map.cljs", :line 41, :column 7, :end-line 41, :end-column 21, :arglists (quote ([sources])), :doc "Take a seq of source file names and return a comparator\n   that can be used to construct a sorted map. For reverse\n   source maps."}, :name cljs.source-map/source-compare, :variadic false, :file "out/cljs/source_map.cljs", :end-column 21, :method-params ([sources]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sources])), :doc "Take a seq of source file names and return a comparator\n   that can be used to construct a sorted map. For reverse\n   source maps."}, seg->map {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/source_map.cljs", :line 52, :column 7, :end-line 52, :end-column 15, :arglists (quote ([seg source-map])), :doc "Take a source map segment represented as a vector\n   and return a map."}, :name cljs.source-map/seg->map, :variadic false, :file "out/cljs/source_map.cljs", :end-column 15, :method-params ([seg source-map]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([seg source-map])), :doc "Take a source map segment represented as a vector\n   and return a map."}, seg-combine {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/source_map.cljs", :line 64, :column 7, :end-line 64, :end-column 18, :arglists (quote ([seg relseg])), :doc "Combine a source map segment vector and a relative\n   source map segment vector and combine them to get\n   an absolute segment posititon information as a vector."}, :name cljs.source-map/seg-combine, :variadic false, :file "out/cljs/source_map.cljs", :end-column 18, :method-params ([seg relseg]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([seg relseg])), :doc "Combine a source map segment vector and a relative\n   source map segment vector and combine them to get\n   an absolute segment posititon information as a vector."}, update-reverse-result {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/source_map.cljs", :line 80, :column 7, :end-line 80, :end-column 28, :arglists (quote ([result segmap gline])), :doc "Helper for decode-reverse. Take a reverse source map and\n  update it with a segment map."}, :name cljs.source-map/update-reverse-result, :variadic false, :file "out/cljs/source_map.cljs", :end-column 28, :method-params ([result segmap gline]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 80, :max-fixed-arity 3, :fn-var true, :arglists (quote ([result segmap gline])), :doc "Helper for decode-reverse. Take a reverse source map and\n  update it with a segment map."}, decode-reverse {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/source_map.cljs", :line 98, :column 7, :end-line 98, :end-column 21, :arglists (quote ([source-map] [mappings source-map])), :doc "Convert a v3 source map JSON object into a reverse source map\n  mapping original ClojureScript source locations to the generated\n  JavaScript.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([source-map] [mappings source-map]), :arglists ([source-map] [mappings source-map]), :arglists-meta (nil nil)}}, :name cljs.source-map/decode-reverse, :variadic false, :file "out/cljs/source_map.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([source-map] [mappings source-map]), :arglists ([source-map] [mappings source-map]), :arglists-meta (nil nil)}, :method-params ([source-map] [mappings source-map]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists ([source-map] [mappings source-map]), :doc "Convert a v3 source map JSON object into a reverse source map\n  mapping original ClojureScript source locations to the generated\n  JavaScript."}, update-result {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/source_map.cljs", :line 128, :column 7, :end-line 128, :end-column 20, :arglists (quote ([result segmap gline])), :doc "Helper for decode. Take a source map and update it based on a\n  segment map."}, :name cljs.source-map/update-result, :variadic false, :file "out/cljs/source_map.cljs", :end-column 20, :method-params ([result segmap gline]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 128, :max-fixed-arity 3, :fn-var true, :arglists (quote ([result segmap gline])), :doc "Helper for decode. Take a source map and update it based on a\n  segment map."}, decode {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/source_map.cljs", :line 143, :column 7, :end-line 143, :end-column 13, :arglists (quote ([source-map] [mappings source-map])), :doc "Convert a v3 source map JSON object into a source map mapping\n  generated JavaScript source locations to the original\n  ClojureScript.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([source-map] [mappings source-map]), :arglists ([source-map] [mappings source-map]), :arglists-meta (nil nil)}}, :name cljs.source-map/decode, :variadic false, :file "out/cljs/source_map.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([source-map] [mappings source-map]), :arglists ([source-map] [mappings source-map]), :arglists-meta (nil nil)}, :method-params ([source-map] [mappings source-map]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists ([source-map] [mappings source-map]), :doc "Convert a v3 source map JSON object into a source map mapping\n  generated JavaScript source locations to the original\n  ClojureScript."}, merge-source-maps {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/source_map.cljs", :line 173, :column 7, :end-line 173, :end-column 24, :arglists (quote ([cljs-map js-map])), :doc "Merge an internal source map representation of a single\n   ClojureScript file mapping original to generated with a\n   second source map mapping original JS to generated JS.\n   The is to support source maps that work through multiple\n   compilation steps like Google Closure optimization passes."}, :name cljs.source-map/merge-source-maps, :variadic false, :file "out/cljs/source_map.cljs", :end-column 24, :method-params ([cljs-map js-map]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cljs-map js-map])), :doc "Merge an internal source map representation of a single\n   ClojureScript file mapping original to generated with a\n   second source map mapping original JS to generated JS.\n   The is to support source maps that work through multiple\n   compilation steps like Google Closure optimization passes."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:gline :name :source :line :col :gcol}, :order [:gcol :source :line :col :name :gline]}, :doc nil}