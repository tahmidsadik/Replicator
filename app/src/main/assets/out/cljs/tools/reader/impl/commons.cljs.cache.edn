;; Analyzed by ClojureScript 0.0-3464
{:use-macros nil, :excludes #{char}, :name cljs.tools.reader.impl.commons, :imports nil, :requires {cljs.tools.reader.reader-types cljs.tools.reader.reader-types, cljs.tools.reader.impl.utils cljs.tools.reader.impl.utils}, :uses {char cljs.tools.reader.impl.utils, numeric? cljs.tools.reader.impl.utils, reader-error cljs.tools.reader.reader-types, peek-char cljs.tools.reader.reader-types, read-char cljs.tools.reader.reader-types, newline? cljs.tools.reader.impl.utils}, :defs {match-number {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 89, :column 7, :end-line 89, :end-column 19, :arglists (quote ([s]))}, :name cljs.tools.reader.impl.commons/match-number, :variadic false, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, skip-line {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 35, :column 7, :end-line 35, :end-column 16, :arglists (quote ([reader])), :doc "Advances the reader to the end of a line. Returns the reader"}, :name cljs.tools.reader.impl.commons/skip-line, :variadic false, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 16, :method-params ([reader]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reader])), :doc "Advances the reader to the end of a line. Returns the reader"}, int-pattern {:name cljs.tools.reader.impl.commons/int-pattern, :file "out/cljs/tools/reader/impl/commons.cljs", :line nil, :column nil, :end-line 43, :end-column 17, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 43, :column 6, :end-line 43, :end-column 17}}, read-comment {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 124, :column 7, :end-line 124, :end-column 19, :arglists (quote ([rdr & _])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(rdr _)], :arglists ([rdr & _]), :arglists-meta (nil)}}, :name cljs.tools.reader.impl.commons/read-comment, :variadic true, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(rdr _)], :arglists ([rdr & _]), :arglists-meta (nil)}, :method-params [(rdr _)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists ([rdr & _])}, match-ratio {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 67, :column 8, :end-line 67, :end-column 19, :private true, :arglists (quote ([s]))}, :private true, :name cljs.tools.reader.impl.commons/match-ratio, :variadic false, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, match-int {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 47, :column 8, :end-line 47, :end-column 17, :private true, :arglists (quote ([s]))}, :private true, :name cljs.tools.reader.impl.commons/match-int, :variadic false, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, parse-symbol {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 97, :column 7, :end-line 97, :end-column 19, :arglists (quote ([token])), :doc "Parses a string into a vector of the namespace and symbol"}, :name cljs.tools.reader.impl.commons/parse-symbol, :variadic false, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 19, :method-params ([token]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([token])), :doc "Parses a string into a vector of the namespace and symbol"}, number-literal? {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 19, :column 16, :end-line 19, :end-column 31, :tag boolean, :arglists (quote ([reader initch])), :doc "Checks whether the reader is at the start of a number literal"}, :name cljs.tools.reader.impl.commons/number-literal?, :variadic false, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 31, :method-params ([reader initch]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 19, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([reader initch])), :doc "Checks whether the reader is at the start of a number literal"}, read-past {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([pred rdr])), :doc "Read until first character that doesn't match pred, returning\n   char."}, :name cljs.tools.reader.impl.commons/read-past, :variadic false, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 16, :method-params ([pred rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred rdr])), :doc "Read until first character that doesn't match pred, returning\n   char."}, float-pattern {:name cljs.tools.reader.impl.commons/float-pattern, :file "out/cljs/tools/reader/impl/commons.cljs", :line nil, :column nil, :end-line 45, :end-column 19, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 45, :column 6, :end-line 45, :end-column 19}}, matches? {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 85, :column 16, :end-line 85, :end-column 24, :tag boolean, :arglists (quote ([pattern s]))}, :name cljs.tools.reader.impl.commons/matches?, :variadic false, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 24, :method-params ([pattern s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 85, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([pattern s]))}, throwing-reader {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 128, :column 7, :end-line 128, :end-column 22, :arglists (quote ([msg]))}, :name cljs.tools.reader.impl.commons/throwing-reader, :variadic false, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 22, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg]))}, match-float {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 78, :column 8, :end-line 78, :end-column 19, :private true, :arglists (quote ([s]))}, :private true, :name cljs.tools.reader.impl.commons/match-float, :variadic false, :file "out/cljs/tools/reader/impl/commons.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, ratio-pattern {:name cljs.tools.reader.impl.commons/ratio-pattern, :file "out/cljs/tools/reader/impl/commons.cljs", :line nil, :column nil, :end-line 44, :end-column 19, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tools/reader/impl/commons.cljs", :line 44, :column 6, :end-line 44, :end-column 19}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}