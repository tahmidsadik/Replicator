;; Analyzed by ClojureScript 0.0-3464
{:name cljs.tagged-literals, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {reader cljs.reader, cljs.reader cljs.reader}, :imports nil, :defs {read-queue {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tagged_literals.cljc", :line 5, :column 7, :end-line 5, :end-column 17, :arglists (quote ([form]))}, :name cljs.tagged-literals/read-queue, :variadic false, :file "out/cljs/tagged_literals.cljc", :end-column 17, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, read-uuid {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tagged_literals.cljc", :line 26, :column 10, :end-line 26, :end-column 19, :arglists (quote ([form]))}, :name cljs.tagged-literals/read-uuid, :variadic false, :file "out/cljs/tagged_literals.cljc", :end-column 19, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, read-inst {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tagged_literals.cljc", :line 46, :column 10, :end-line 46, :end-column 19, :arglists (quote ([form]))}, :name cljs.tagged-literals/read-inst, :variadic false, :file "out/cljs/tagged_literals.cljc", :end-column 19, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, valid-js-literal-key? {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tagged_literals.cljc", :line 55, :column 7, :end-line 55, :end-column 28, :arglists (quote ([k]))}, :name cljs.tagged-literals/valid-js-literal-key?, :variadic false, :file "out/cljs/tagged_literals.cljc", :end-column 28, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, JSValue {:num-fields 1, :protocols #{}, :name cljs.tagged-literals/JSValue, :file "out/cljs/tagged_literals.cljc", :end-column 17, :type true, :column 10, :line 60, :record false, :end-line 60, :skip-protocol-flag nil}, ->JSValue {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tagged_literals.cljc", :line 60, :column 10, :end-line 60, :end-column 17, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([val]))}, :protocols #{}, :name cljs.tagged-literals/->JSValue, :variadic false, :file "out/cljs/tagged_literals.cljc", :end-column 17, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :skip-protocol-flag nil}, read-js {:protocol-inline nil, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tagged_literals.cljc", :line 62, :column 7, :end-line 62, :end-column 14, :arglists (quote ([form]))}, :name cljs.tagged-literals/read-js, :variadic false, :file "out/cljs/tagged_literals.cljc", :end-column 14, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, *cljs-data-readers* {:name cljs.tagged-literals/*cljs-data-readers*, :file "out/cljs/tagged_literals.cljc", :line nil, :column nil, :end-line 79, :end-column 35, :dynamic true, :meta {:file "/Users/tahmid/code/clojure/replete/ClojureScript/replete/out/cljs/tagged_literals.cljc", :line 79, :column 16, :end-line 79, :end-column 35, :dynamic true}}}}