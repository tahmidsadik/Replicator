;; Analyzed by ClojureScript 0.0-3479
{:use-macros {ensure cljs.env.macros, with-compiler-env cljs.env.macros, no-warn cljs.analyzer.macros}, :excludes #{}, :name replete.core, :imports nil, :requires {cljs.compiler cljs.compiler, cljs.tools.reader cljs.tools.reader, tags cljs.tagged-literals, r cljs.tools.reader, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, cljs.env cljs.env, ana cljs.analyzer, cljs.pprint cljs.pprint, cljs.tagged-literals cljs.tagged-literals, env cljs.env, s clojure.string, cljs.analyzer cljs.analyzer, c cljs.compiler, cljs.repl cljs.repl, clojure.string clojure.string, repl cljs.repl}, :uses {pprint cljs.pprint, string-push-back-reader cljs.tools.reader.reader-types}, :defs {is-readable? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 42, :column 16, :end-line 42, :end-column 28, :export true, :arglists (quote ([line]))}, :name replete.core/is-readable?, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 28, :method-params ([line]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column nil, :line nil, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, reflow {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 72, :column 7, :end-line 72, :end-column 13, :arglists (quote ([text]))}, :name replete.core/reflow, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 13, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, user-interface-idiom-ipad? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 34, :column 7, :end-line 34, :end-column 33, :arglists (quote ([])), :doc "Returns true iff the interface idiom is iPad."}, :name replete.core/user-interface-idiom-ipad?, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 34, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns true iff the interface idiom is iPad."}, repl-read-string {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 39, :column 7, :end-line 39, :end-column 23, :arglists (quote ([line]))}, :name replete.core/repl-read-string, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 23, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, cenv {:name replete.core/cenv, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line nil, :column nil, :end-line 16, :end-column 10, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 16, :column 6, :end-line 16, :end-column 10}}, ns-form? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 53, :column 7, :end-line 53, :end-column 15, :arglists (quote ([form]))}, :name replete.core/ns-form?, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 15, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, read-eval-print {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 90, :column 16, :end-line 90, :end-column 31, :export true, :arglists (quote ([line]))}, :name replete.core/read-eval-print, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 31, :method-params ([line]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column nil, :line nil, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, init-app-env {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 31, :column 16, :end-line 31, :end-column 28, :export true, :arglists (quote ([app-env]))}, :name replete.core/init-app-env, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 28, :method-params ([app-env]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column nil, :line nil, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app-env]))}, map-keys {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 28, :column 7, :end-line 28, :end-column 15, :arglists (quote ([f m]))}, :name replete.core/map-keys, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 15, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m]))}, setup-cljs-user {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 22, :column 16, :end-line 22, :end-column 31, :export true, :arglists (quote ([]))}, :name replete.core/setup-cljs-user, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column nil, :line nil, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, repl-special? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 58, :column 7, :end-line 58, :end-column 20, :arglists (quote ([form]))}, :name replete.core/repl-special?, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 20, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, DEBUG {:name replete.core/DEBUG, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line nil, :column nil, :end-line 14, :end-column 11, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 14, :column 6, :end-line 14, :end-column 11}}, repl-special-doc-map {:name replete.core/repl-special-doc-map, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line nil, :column nil, :end-line 61, :end-column 26, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 61, :column 6, :end-line 61, :end-column 26}}, current-ns {:name replete.core/current-ns, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line nil, :column nil, :end-line 51, :end-column 16, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 51, :column 6, :end-line 51, :end-column 16}}, app-env {:name replete.core/app-env, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line nil, :column nil, :end-line 26, :end-column 13, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 26, :column 6, :end-line 26, :end-column 13}}, resolve {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 79, :column 7, :end-line 79, :end-column 14, :arglists (quote ([env sym])), :doc "Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"}, :name replete.core/resolve, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 14, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env sym])), :doc "Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"}, repl-special-doc {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 67, :column 8, :end-line 67, :end-column 24, :private true, :arglists (quote ([name-symbol]))}, :private true, :name replete.core/repl-special-doc, :variadic false, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :end-column 24, :method-params ([name-symbol]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name-symbol]))}, repl-specials {:name replete.core/repl-specials, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line nil, :column nil, :end-line 56, :end-column 19, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/src/replete/core.cljs", :line 56, :column 6, :end-line 56, :end-column 19}}}, :require-macros {cljs.env.macros cljs.env.macros, cljs.analyzer.macros cljs.analyzer.macros, cljs.pprint cljs.pprint, repl cljs.repl, cljs.repl cljs.repl}, :cljs.analyzer/constants {:seen #{:features :cljs.analyzer/namespaces :meta :else :default :ns :def-emits-var :name :read-cond :repl-special-function :allow :expr :context :user-interface-idiom :arglists :doc :cljs}, :order [:cljs.analyzer/namespaces :user-interface-idiom :read-cond :features :allow :cljs :default :arglists :doc :name :repl-special-function :context :expr :ns :def-emits-var :else :meta]}, :doc nil}