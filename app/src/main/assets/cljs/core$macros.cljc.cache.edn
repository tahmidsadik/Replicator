;; Analyzed by ClojureScript 0.0-3479
{:use-macros nil, :excludes #{unsafe-bit-and macroexpand unchecked-remainder-int when-first cond->> bit-set gen-class while satisfies? unchecked-subtract-int ns-unmap import bit-shift-right aget pvalues bound-fn specify vswap! dosync caching-hash bit-shift-left coercive-not aclone dec < with-loading-context test this-as .. delay char unchecked-long unchecked-negate simple-benchmark gen-interface unchecked-inc-int with-bindings js-str bit-shift-right-zero-fill implements? pos? specify! if-not alength bit-xor doseq unsigned-bit-shift-right neg? unchecked-float undefined? deftype mask when-let divide coercive-boolean <= if-some * min with-precision lazy-seq js-delete truth_ defcurried js-debugger let -> defstruct coercive-not= get doto areduce long double definline bit-and-not unchecked-add-int future fn short definterface js-this unchecked-double string? js-arguments unchecked-multiply-int as-> when-not when int > unchecked-int keyword? unchecked-multiply gen-apply-to some->> unchecked-dec defn float js-in ns es6-iterable mod amap declare - hash-set or assert-args extend-type macroexpand-1 bit-test defmethod time zero? unchecked-dec-int memfn js-obj nil? extend-protocol cond-> dotimes bit-and reify instance? with-open load-file* defonce unchecked-add rfn identical? unchecked-divide-int defn- defprotocol unchecked-subtract sync assert true? array letfn / bitpos bit-or vector proxy-super >= loop bit-flip js-mod unchecked-divide with-out-str condp cond with-in-str some-> ns-interns for binding array-map unchecked-byte with-local-vars defmacro unchecked-short alias proxy inc with-redefs bit-clear locking list + var aset destructure defmulti str coercive-= hash-map if-let false? case exists? bit-not io! byte max == lazy-cat comment copy-arguments defrecord make-array unchecked-negate-int unchecked-inc and number? symbol? when-some unchecked-char ->> refer-clojure}, :name cljs.core$macros, :imports nil, :requires {clojure.walk clojure.walk, clojure.set clojure.set, cljs.compiler cljs.compiler, env cljs.env, cljs.env cljs.env, core cljs.core, cljs.core cljs.core, ana cljs.analyzer, cljs.analyzer cljs.analyzer}, :uses nil, :defs {unsafe-bit-and {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1041, :column 31, :end-line 1041, :end-column 45, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/unsafe-bit-and, :variadic true, :file "out/cljs/core.cljc", :end-column 45, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1041, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, macroexpand {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2560, :column 16, :end-line 2560, :end-column 27, :macro true, :arglists (quote ([quoted])), :doc "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms."}, :name cljs.core$macros/macroexpand, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([&form &env quoted]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2560, :max-fixed-arity 3, :fn-var true, :arglists (quote ([quoted])), :doc "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms."}, unchecked-remainder-int {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 948, :column 31, :end-line 948, :end-column 54, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/unchecked-remainder-int, :variadic false, :file "out/cljs/core.cljc", :end-column 54, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 948, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, when-first {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 392, :column 19, :end-line 392, :end-column 29, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => x xs\n\n     Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-first, :variadic true, :file "out/cljs/core.cljc", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 392, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => x xs\n\n     Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once"}, cond->> {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 451, :column 19, :end-line 451, :end-column 26, :macro true, :arglists (quote ([expr & clauses])), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n     through each form for which the corresponding test expression\n     is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n     after the first true test expression.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/cond->>, :variadic true, :file "out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 451, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & clauses]), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n     through each form for which the corresponding test expression\n     is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n     after the first true test expression."}, bit-set {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1081, :column 31, :end-line 1081, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-set, :variadic false, :file "out/cljs/core.cljc", :end-column 38, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1081, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, while {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 427, :column 19, :end-line 427, :end-column 24, :macro true, :arglists (quote ([test & body])), :doc "Repeatedly executes body while test expression is true. Presumes\n     some side-effect will cause test to become false/nil. Returns nil", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/while, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 427, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env test & body]), :doc "Repeatedly executes body while test expression is true. Presumes\n     some side-effect will cause test to become false/nil. Returns nil"}, satisfies? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1863, :column 16, :end-line 1863, :end-column 26, :macro true, :arglists (quote ([psym x])), :doc "Returns true if x satisfies the protocol"}, :name cljs.core$macros/satisfies?, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env psym x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1863, :max-fixed-arity 4, :fn-var true, :arglists (quote ([psym x])), :doc "Returns true if x satisfies the protocol"}, protocol-prefix {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1135, :column 13, :end-line 1135, :end-column 28, :private true, :arglists (quote ([psym]))}, :private true, :name cljs.core$macros/protocol-prefix, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([psym]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([psym]))}, unchecked-subtract-int {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 954, :column 31, :end-line 954, :end-column 53, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-subtract-int, :variadic true, :file "out/cljs/core.cljc", :end-column 53, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 954, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, ns-unmap {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2531, :column 16, :end-line 2531, :end-column 24, :macro true, :arglists (quote ([[quote0 ns] [quote1 sym]])), :doc "Removes the mappings for the symbol from the namespace."}, :name cljs.core$macros/ns-unmap, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([&form &env p__13718 p__13719]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2531, :max-fixed-arity 4, :fn-var true, :arglists (quote ([[quote0 ns] [quote1 sym]])), :doc "Removes the mappings for the symbol from the namespace."}, sigs {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 574, :column 3, :end-line 574, :end-column 7, :private true}, :private true, :name cljs.core$macros/sigs, :variadic false, :file "out/cljs/core.cljc", :end-column 7, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (), :column nil, :line nil, :end-line 574, :max-fixed-arity 1, :fn-var true, :arglists nil}, bool-expr {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 755, :column 13, :end-line 755, :end-column 22, :private true, :arglists (quote ([e]))}, :private true, :name cljs.core$macros/bool-expr, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 755, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, adapt-ifn-params {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1294, :column 13, :end-line 1294, :end-column 29, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-ifn-params, :variadic false, :file "out/cljs/core.cljc", :end-column 29, :method-params ([type p__13236]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1294, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, bit-shift-right {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1072, :column 31, :end-line 1072, :end-column 46, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-right, :variadic false, :file "out/cljs/core.cljc", :end-column 46, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1072, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, aget {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 883, :column 16, :end-line 883, :end-column 20, :macro true, :arglists (quote ([a i] [a i & idxs])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env a i]), :arglists ([&form &env a i] [&form &env a i & idxs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/aget, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env a i]), :arglists ([&form &env a i] [&form &env a i & idxs]), :arglists-meta (nil nil)}, :method-params ([&form &env a i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 883, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env a i] [&form &env a i & idxs])}, specify {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1220, :column 16, :end-line 1220, :end-column 23, :macro true, :arglists (quote ([expr & impls])), :doc "Identical to specify but does not mutate its first argument. The first\n  argument must be an ICloneable instance.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/specify, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}, :method-params [(&form &env expr impls)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1220, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & impls]), :doc "Identical to specify but does not mutate its first argument. The first\n  argument must be an ICloneable instance."}, vswap! {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2540, :column 16, :end-line 2540, :end-column 22, :macro true, :arglists (quote ([vol f & args])), :doc "Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env vol f args)], :arglists ([&form &env vol f & args]), :arglists-meta (nil)}}, :name cljs.core$macros/vswap!, :variadic true, :file "out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env vol f args)], :arglists ([&form &env vol f & args]), :arglists-meta (nil)}, :method-params [(&form &env vol f args)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2540, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env vol f & args]), :doc "Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in."}, caching-hash {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1093, :column 16, :end-line 1093, :end-column 28, :macro true, :arglists (quote ([coll hash-fn hash-key]))}, :name cljs.core$macros/caching-hash, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([&form &env coll hash-fn hash-key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1093, :max-fixed-arity 5, :fn-var true, :arglists (quote ([coll hash-fn hash-key]))}, bit-shift-left {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1069, :column 31, :end-line 1069, :end-column 45, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-left, :variadic false, :file "out/cljs/core.cljc", :end-column 45, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1069, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, js-base-type {:name cljs.core$macros/js-base-type, :file "out/cljs/core.cljc", :line nil, :column nil, :end-line 1148, :end-column 29, :private true, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1148, :column 17, :end-line 1148, :end-column 29, :private true}}, coercive-not {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 803, :column 16, :end-line 803, :end-column 28, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/coercive-not, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 803, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, resolve-var {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1257, :column 13, :end-line 1257, :end-column 24, :private true, :arglists (quote ([env sym]))}, :private true, :name cljs.core$macros/resolve-var, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1257, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env sym]))}, dec {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1003, :column 31, :end-line 1003, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/dec, :variadic false, :file "out/cljs/core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1003, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, < {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 978, :column 31, :end-line 978, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/<, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 978, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, variadic-fn? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2577, :column 13, :end-line 2577, :end-column 25, :private true, :arglists (quote ([fdecl]))}, :private true, :name cljs.core$macros/variadic-fn?, :variadic false, :file "out/cljs/core.cljc", :end-column 25, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2577, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl]))}, this-as {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1230, :column 16, :end-line 1230, :end-column 23, :macro true, :arglists (quote ([name & body])), :doc "Defines a scope where JavaScript's implicit \"this\" is bound to the name provided.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name body)], :arglists ([&form &env name & body]), :arglists-meta (nil)}}, :name cljs.core$macros/this-as, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name body)], :arglists ([&form &env name & body]), :arglists-meta (nil)}, :method-params [(&form &env name body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1230, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & body]), :doc "Defines a scope where JavaScript's implicit \"this\" is bound to the name provided."}, .. {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 129, :column 19, :end-line 129, :end-column 21, :macro true, :arglists (quote ([x form] [x form & more])), :doc "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n     Expands into a member access (.) of the first member on the first\n     argument, followed by the next member on the result, etc. For\n     instance:\n\n     (.. System (getProperties) (get \"os.name\"))\n\n     expands to:\n\n     (. (. System (getProperties)) (get \"os.name\"))\n\n     but is easier to write, read, and understand.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x form]), :arglists ([&form &env x form] [&form &env x form & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/.., :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x form]), :arglists ([&form &env x form] [&form &env x form & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x form]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 129, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x form] [&form &env x form & more]), :doc "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n     Expands into a member access (.) of the first member on the first\n     argument, followed by the next member on the result, etc. For\n     instance:\n\n     (.. System (getProperties) (get \"os.name\"))\n\n     expands to:\n\n     (. (. System (getProperties)) (get \"os.name\"))\n\n     but is easier to write, read, and understand."}, delay {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1901, :column 16, :end-line 1901, :end-column 21, :macro true, :arglists (quote ([& body])), :doc "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/delay, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1901, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls."}, unchecked-negate {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 942, :column 31, :end-line 942, :end-column 47, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-negate, :variadic false, :file "out/cljs/core.cljc", :end-column 47, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 942, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, simple-benchmark {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2446, :column 16, :end-line 2446, :end-column 32, :macro true, :arglists (quote ([bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}])), :doc "Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case.", :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :arglists-meta (nil)}}, :name cljs.core$macros/simple-benchmark, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :arglists-meta (nil)}, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2446, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :doc "Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case."}, prepare-protocol-masks {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1436, :column 13, :end-line 1436, :end-column 35, :private true, :arglists (quote ([env impls]))}, :private true, :name cljs.core$macros/prepare-protocol-masks, :variadic false, :file "out/cljs/core.cljc", :end-column 35, :method-params ([env impls]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1436, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env impls]))}, unchecked-inc-int {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 933, :column 31, :end-line 933, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-inc-int, :variadic false, :file "out/cljs/core.cljc", :end-column 48, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 933, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, js-str {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2511, :column 16, :end-line 2511, :end-column 22, :macro true, :arglists (quote ([s]))}, :name cljs.core$macros/js-str, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([&form &env s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2511, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s]))}, bit-shift-right-zero-fill {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1075, :column 31, :end-line 1075, :end-column 56, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-right-zero-fill, :variadic false, :file "out/cljs/core.cljc", :end-column 56, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1075, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, implements? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1837, :column 16, :end-line 1837, :end-column 27, :macro true, :arglists (quote ([psym x])), :doc "EXPERIMENTAL"}, :name cljs.core$macros/implements?, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([&form &env psym x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1837, :max-fixed-arity 4, :fn-var true, :arglists (quote ([psym x])), :doc "EXPERIMENTAL"}, assert-valid-fdecl {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 533, :column 30, :end-line 533, :end-column 48, :dynamic true, :private true, :arglists (quote ([fdecl])), :doc "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn."}, :private true, :name cljs.core$macros/assert-valid-fdecl, :variadic false, :file "out/cljs/core.cljc", :end-column 48, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :dynamic true, :line nil, :end-line 533, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl])), :doc "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn."}, const? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2003, :column 13, :end-line 2003, :end-column 19, :private true, :arglists (quote ([env x]))}, :private true, :name cljs.core$macros/const?, :variadic false, :file "out/cljs/core.cljc", :end-column 19, :method-params ([env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2003, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env x]))}, pos? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1012, :column 31, :end-line 1012, :end-column 35, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/pos?, :variadic false, :file "out/cljs/core.cljc", :end-column 35, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1012, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, specify! {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1212, :column 16, :end-line 1212, :end-column 24, :macro true, :arglists (quote ([expr & impls])), :doc "Identical to reify but mutates its first argument.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/specify!, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}, :method-params [(&form &env expr impls)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1212, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & impls]), :doc "Identical to reify but mutates its first argument."}, if-not {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 351, :column 19, :end-line 351, :end-column 25, :macro true, :arglists (quote ([test then] [test then else])), :doc "Evaluates test. If logical false, evaluates and returns then expr,\n     otherwise else expr, if supplied, else nil.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([&form &env test then] [&form &env test then else]), :arglists ([&form &env test then] [&form &env test then else]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-not, :variadic false, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([&form &env test then] [&form &env test then else]), :arglists ([&form &env test then] [&form &env test then else]), :arglists-meta (nil nil)}, :method-params ([&form &env test then] [&form &env test then else]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 351, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env test then] [&form &env test then else]), :doc "Evaluates test. If logical false, evaluates and returns then expr,\n     otherwise else expr, if supplied, else nil."}, build-positional-factory {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1486, :column 13, :end-line 1486, :end-column 37, :private true, :arglists (quote ([rsym rname fields]))}, :private true, :name cljs.core$macros/build-positional-factory, :variadic false, :file "out/cljs/core.cljc", :end-column 37, :method-params ([rsym rname fields]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1486, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rsym rname fields]))}, alength {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2332, :column 16, :end-line 2332, :end-column 23, :macro true, :arglists (quote ([a]))}, :name cljs.core$macros/alength, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env a]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2332, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a]))}, bit-xor {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1052, :column 31, :end-line 1052, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-xor, :variadic true, :file "out/cljs/core.cljc", :end-column 38, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1052, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, doseq {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2180, :column 16, :end-line 2180, :end-column 21, :macro true, :arglists (quote ([seq-exprs & body])), :doc "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env seq-exprs body)], :arglists ([&form &env seq-exprs & body]), :arglists-meta (nil)}}, :name cljs.core$macros/doseq, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env seq-exprs body)], :arglists ([&form &env seq-exprs & body]), :arglists-meta (nil)}, :method-params [(&form &env seq-exprs body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2180, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env seq-exprs & body]), :doc "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil."}, unsigned-bit-shift-right {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1078, :column 31, :end-line 1078, :end-column 55, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/unsigned-bit-shift-right, :variadic false, :file "out/cljs/core.cljc", :end-column 55, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1078, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, neg? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1015, :column 31, :end-line 1015, :end-column 35, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/neg?, :variadic false, :file "out/cljs/core.cljc", :end-column 35, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1015, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, adapt-ifn-invoke-params {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1302, :column 13, :end-line 1302, :end-column 36, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-ifn-invoke-params, :variadic false, :file "out/cljs/core.cljc", :end-column 36, :method-params ([type p__13241]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1302, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, unchecked-float {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 912, :column 16, :end-line 912, :end-column 31, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-float, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 912, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, undefined? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 857, :column 16, :end-line 857, :end-column 26, :macro true, :arglists (quote ([x])), :doc "Return true if argument is identical to the JavaScript undefined value."}, :name cljs.core$macros/undefined?, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 857, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :doc "Return true if argument is identical to the JavaScript undefined value."}, deftype {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1502, :column 16, :end-line 1502, :end-column 23, :macro true, :arglists (quote ([t fields & impls])), :doc "(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env t fields impls)], :arglists ([&form &env t fields & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/deftype, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env t fields impls)], :arglists ([&form &env t fields & impls]), :arglists-meta (nil)}, :method-params [(&form &env t fields impls)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1502, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env t fields & impls]), :doc "(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields"}, mask {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1085, :column 16, :end-line 1085, :end-column 20, :macro true, :arglists (quote ([hash shift]))}, :name cljs.core$macros/mask, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([&form &env hash shift]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1085, :max-fixed-arity 4, :fn-var true, :arglists (quote ([hash shift]))}, build-map-factory {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1654, :column 13, :end-line 1654, :end-column 30, :private true, :arglists (quote ([rsym rname fields]))}, :private true, :name cljs.core$macros/build-map-factory, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([rsym rname fields]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1654, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rsym rname fields]))}, when-let {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 406, :column 19, :end-line 406, :end-column 27, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => binding-form test\n\n     When test is true, evaluates body with binding-form bound to the value of test", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-let, :variadic true, :file "out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 406, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => binding-form test\n\n     When test is true, evaluates body with binding-form bound to the value of test"}, divide {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 973, :column 31, :end-line 973, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/divide, :variadic true, :file "out/cljs/core.cljc", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 973, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, coercive-boolean {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 815, :column 16, :end-line 815, :end-column 32, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/coercive-boolean, :variadic false, :file "out/cljs/core.cljc", :end-column 32, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 815, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, <= {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 983, :column 31, :end-line 983, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/<=, :variadic true, :file "out/cljs/core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 983, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, if-some {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 497, :column 19, :end-line 497, :end-column 26, :macro true, :arglists (quote ([bindings then] [bindings then else & oldform])), :doc "bindings => binding-form test\n\n      If test is not nil, evaluates then with binding-form bound to the\n      value of test, if not, yields else", :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-some, :variadic true, :file "out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}, :method-params ([&form &env bindings then]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 497, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :doc "bindings => binding-form test\n\n      If test is not nil, evaluates then with binding-form bound to the\n      value of test, if not, yields else"}, * {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 962, :column 31, :end-line 962, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([] [x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core$macros/*, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([&form &env] [&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :macro true, :end-line 962, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, min {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1024, :column 31, :end-line 1024, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/min, :variadic true, :file "out/cljs/core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 1024, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, adapt-proto-params {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1307, :column 13, :end-line 1307, :end-column 31, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-proto-params, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([type p__13246]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1307, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, lazy-seq {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1893, :column 16, :end-line 1893, :end-column 24, :macro true, :arglists (quote ([& body])), :doc "Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/lazy-seq, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1893, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls."}, js-delete {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 828, :column 16, :end-line 828, :end-column 25, :macro true, :arglists (quote ([obj key]))}, :name cljs.core$macros/js-delete, :variadic false, :file "out/cljs/core.cljc", :end-column 25, :method-params ([&form &env obj key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 828, :max-fixed-arity 4, :fn-var true, :arglists (quote ([obj key]))}, truth_ {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 820, :column 16, :end-line 820, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/truth_, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 820, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, annotate-specs {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1458, :column 13, :end-line 1458, :end-column 27, :private true, :arglists (quote ([annots v [f sigs]]))}, :private true, :name cljs.core$macros/annotate-specs, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([annots v p__13313]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1458, :max-fixed-arity 3, :fn-var true, :arglists (quote ([annots v [f sigs]]))}, defcurried {:protocol-inline nil, :meta {:private true, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :end-column 36, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(&form &env name doc meta args body)], :arglists ([&form &env name doc meta args & body]), :arglists-meta (nil)}, :column 26, :line 1111, :macro true, :end-line 1111, :arglists (quote ([name doc meta args & body])), :doc "Builds another arity of the fn that returns a fn awaiting the last\n  param"}, :private true, :name cljs.core$macros/defcurried, :variadic true, :file "out/cljs/core.cljc", :end-column 36, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(&form &env name doc meta args body)], :arglists ([&form &env name doc meta args & body]), :arglists-meta (nil)}, :method-params [(&form &env name doc meta args body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1111, :max-fixed-arity 6, :fn-var true, :arglists ([&form &env name doc meta args & body]), :doc "Builds another arity of the fn that returns a fn awaiting the last\n  param"}, js-debugger {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 834, :column 16, :end-line 834, :end-column 27, :macro true, :arglists (quote ([])), :doc "Emit JavaScript \"debugger;\" statement."}, :name cljs.core$macros/js-debugger, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 834, :max-fixed-arity 2, :fn-var true, :arglists (quote ([])), :doc "Emit JavaScript \"debugger;\" statement."}, let {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 688, :column 16, :end-line 688, :end-column 19, :macro true, :arglists (quote ([bindings & body])), :doc "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/let, :variadic true, :file "out/cljs/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 688, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein."}, base-type {:name cljs.core$macros/base-type, :file "out/cljs/core.cljc", :line nil, :column nil, :end-line 1138, :end-column 26, :private true, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1138, :column 17, :end-line 1138, :end-column 26, :private true}}, -> {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 97, :column 19, :end-line 97, :end-column 21, :macro true, :arglists (quote ([x & forms])), :doc "Threads the expr through the forms. Inserts x as the\n     second item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     second item in second form, etc.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/->, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 97, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env x & forms]), :doc "Threads the expr through the forms. Inserts x as the\n     second item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     second item in second form, etc."}, coercive-not= {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 807, :column 16, :end-line 807, :end-column 29, :macro true, :arglists (quote ([x y]))}, :name cljs.core$macros/coercive-not=, :variadic false, :file "out/cljs/core.cljc", :end-column 29, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 807, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y]))}, doto {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 172, :column 19, :end-line 172, :end-column 23, :macro true, :arglists (quote ([x & forms])), :doc "Evaluates x then calls all of the methods and functions with the\n     value of x supplied at the front of the given arguments.  The forms\n     are evaluated in order.  Returns x.\n\n     (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/doto, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 172, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env x & forms]), :doc "Evaluates x then calls all of the methods and functions with the\n     value of x supplied at the front of the given arguments.  The forms\n     are evaluated in order.  Returns x.\n\n     (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))"}, areduce {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2352, :column 16, :end-line 2352, :end-column 23, :macro true, :arglists (quote ([a idx ret init expr])), :doc "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret."}, :name cljs.core$macros/areduce, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env a idx ret init expr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2352, :max-fixed-arity 7, :fn-var true, :arglists (quote ([a idx ret init expr])), :doc "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret."}, double {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 907, :column 16, :end-line 907, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/double, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 907, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, emit-extend-protocol {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 197, :column 16, :end-line 197, :end-column 36, :private true, :arglists (quote ([p specs]))}, :private true, :name cljs.core$macros/emit-extend-protocol, :variadic false, :file "out/cljs/core.cljc", :end-column 36, :method-params ([p specs]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 197, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p specs]))}, bit-and-not {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1056, :column 31, :end-line 1056, :end-column 42, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-and-not, :variadic true, :file "out/cljs/core.cljc", :end-column 42, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1056, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, unchecked-add-int {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 918, :column 31, :end-line 918, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-add-int, :variadic true, :file "out/cljs/core.cljc", :end-column 48, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 918, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, do-rfn {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1117, :column 13, :end-line 1117, :end-column 19, :private true, :arglists (quote ([f1 k fkv]))}, :private true, :name cljs.core$macros/do-rfn, :variadic false, :file "out/cljs/core.cljc", :end-column 19, :method-params ([f1 k fkv]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1117, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f1 k fkv]))}, fn {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}, :column 19, :line 263, :macro true, :end-line 263, :arglists (quote ([& sigs])), :doc "params => positional-params* , or positional-params* & next-param\n     positional-param => binding-form\n     next-param => binding-form\n     name => symbol\n\n     Defines a function", :forms (quote [(fn name? [params*] exprs*) (fn name? ([params*] exprs*) +)])}, :name cljs.core$macros/fn, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}, :method-params [(&form &env sigs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 263, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & sigs]), :doc "params => positional-params* , or positional-params* & next-param\n     positional-param => binding-form\n     next-param => binding-form\n     name => symbol\n\n     Defines a function", :forms (quote [(fn name? [params*] exprs*) (fn name? ([params*] exprs*) +)])}, short {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 905, :column 16, :end-line 905, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/short, :variadic false, :file "out/cljs/core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 905, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, js-this {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1227, :column 26, :end-line 1227, :end-column 33, :private true, :macro true, :arglists (quote ([]))}, :private true, :name cljs.core$macros/js-this, :variadic false, :file "out/cljs/core.cljc", :end-column 33, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([]))}, unchecked-double {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 913, :column 16, :end-line 913, :end-column 32, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-double, :variadic false, :file "out/cljs/core.cljc", :end-column 32, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 913, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, fast-path-protocols {:name cljs.core$macros/fast-path-protocols, :file "out/cljs/core.cljc", :line nil, :column nil, :end-line 724, :end-column 25, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 724, :column 6, :end-line 724, :end-column 25}, :doc "protocol fqn -> [partition number, bit]"}, string? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 845, :column 16, :end-line 845, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/string?, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 845, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, emit-defrecord {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1572, :column 13, :end-line 1572, :end-column 27, :private true, :arglists (quote ([env tagname rname fields impls])), :doc "Do not use this directly - use defrecord"}, :private true, :name cljs.core$macros/emit-defrecord, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([env tagname rname fields impls]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1572, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env tagname rname fields impls])), :doc "Do not use this directly - use defrecord"}, validate-impl-sigs {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1373, :column 13, :end-line 1373, :end-column 31, :private true, :arglists (quote ([env p method]))}, :private true, :name cljs.core$macros/validate-impl-sigs, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([env p method]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1373, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env p method]))}, js-arguments {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 825, :column 16, :end-line 825, :end-column 28, :macro true, :arglists (quote ([]))}, :name cljs.core$macros/js-arguments, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 825, :max-fixed-arity 2, :fn-var true, :arglists (quote ([]))}, unchecked-multiply-int {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 939, :column 31, :end-line 939, :end-column 53, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-multiply-int, :variadic true, :file "out/cljs/core.cljc", :end-column 53, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 939, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, as-> {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 465, :column 19, :end-line 465, :end-column 23, :macro true, :arglists (quote ([expr name & forms])), :doc "Binds name to expr, evaluates the first form in the lexical context\n     of that binding, then binds name to that result, repeating for each\n     successive form, returning the result of the last form.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env expr name forms)], :arglists ([&form &env expr name & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/as->, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env expr name forms)], :arglists ([&form &env expr name & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr name forms)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 465, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env expr name & forms]), :doc "Binds name to expr, evaluates the first form in the lexical context\n     of that binding, then binds name to that result, repeating for each\n     successive form, returning the result of the last form."}, when-not {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 421, :column 19, :end-line 421, :end-column 27, :macro true, :arglists (quote ([test & body])), :doc "Evaluates test. If logical false, evaluates body in an implicit do.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-not, :variadic true, :file "out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 421, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env test & body]), :doc "Evaluates test. If logical false, evaluates body in an implicit do."}, when {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 386, :column 19, :end-line 386, :end-column 23, :macro true, :arglists (quote ([test & body])), :doc "Evaluates test. If logical true, evaluates body in an implicit do.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 386, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env test & body]), :doc "Evaluates test. If logical true, evaluates body in an implicit do."}, int {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1049, :column 31, :end-line 1049, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/int, :variadic false, :file "out/cljs/core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1049, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, multi-arity-fn {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2654, :column 13, :end-line 2654, :end-column 27, :private true, :arglists (quote ([name meta fdecl]))}, :private true, :name cljs.core$macros/multi-arity-fn, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([name meta fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2654, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name meta fdecl]))}, > {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 988, :column 31, :end-line 988, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/>, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 988, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, keyword? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 880, :column 16, :end-line 880, :end-column 24, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/keyword?, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 880, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, ->impl-map {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1264, :column 13, :end-line 1264, :end-column 23, :private true, :arglists (quote ([impls]))}, :private true, :name cljs.core$macros/->impl-map, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([impls]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([impls]))}, js-obj* {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2303, :column 13, :end-line 2303, :end-column 20, :private true, :arglists (quote ([kvs]))}, :private true, :name cljs.core$macros/js-obj*, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2303, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kvs]))}, unchecked-multiply {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 936, :column 31, :end-line 936, :end-column 49, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-multiply, :variadic true, :file "out/cljs/core.cljc", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 936, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, gen-apply-to {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2481, :column 16, :end-line 2481, :end-column 28, :macro true, :arglists (quote ([]))}, :name cljs.core$macros/gen-apply-to, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2481, :max-fixed-arity 2, :fn-var true, :arglists (quote ([]))}, some->> {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 486, :column 19, :end-line 486, :end-column 26, :macro true, :arglists (quote ([expr & forms])), :doc "When expr is not nil, threads it into the first form (via ->>),\n     and when that result is not nil, through the next etc", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/some->>, :variadic true, :file "out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr forms)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 486, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->>),\n     and when that result is not nil, through the next etc"}, unchecked-dec {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 921, :column 31, :end-line 921, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-dec, :variadic false, :file "out/cljs/core.cljc", :end-column 44, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 921, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, defn {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2726, :column 3, :end-line 2726, :end-column 7, :doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.", :arglists (quote ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?]))}, :name cljs.core$macros/defn, :variadic true, :file "out/cljs/core.cljc", :end-column 7, :method-params ([&form &env name fdecl]), :protocol-impl nil, :arglists-meta (nil {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2724, :column 16, :end-line 2725, :end-column 88}), :column nil, :line nil, :end-line 2726, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?])), :doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions."}, float {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 906, :column 16, :end-line 906, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/float, :variadic false, :file "out/cljs/core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 906, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, js-in {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 831, :column 16, :end-line 831, :end-column 21, :macro true, :arglists (quote ([key obj]))}, :name cljs.core$macros/js-in, :variadic false, :file "out/cljs/core.cljc", :end-column 21, :method-params ([&form &env key obj]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 831, :max-fixed-arity 4, :fn-var true, :arglists (quote ([key obj]))}, es6-iterable {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2514, :column 16, :end-line 2514, :end-column 28, :macro true, :arglists (quote ([ty]))}, :name cljs.core$macros/es6-iterable, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([&form &env ty]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2514, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ty]))}, amap {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2337, :column 16, :end-line 2337, :end-column 20, :macro true, :arglists (quote ([a idx ret expr])), :doc "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret."}, :name cljs.core$macros/amap, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([&form &env a idx ret expr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2337, :max-fixed-arity 6, :fn-var true, :arglists (quote ([a idx ret expr])), :doc "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret."}, declare {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 167, :column 19, :end-line 167, :end-column 26, :macro true, :arglists (quote ([& names])), :doc "defs the supplied var names with no bindings, useful for making forward declarations.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env names)], :arglists ([&form &env & names]), :arglists-meta (nil)}}, :name cljs.core$macros/declare, :variadic true, :file "out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env names)], :arglists ([&form &env & names]), :arglists-meta (nil)}, :method-params [(&form &env names)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & names]), :doc "defs the supplied var names with no bindings, useful for making forward declarations."}, fast-path-protocol-partitions-count {:name cljs.core$macros/fast-path-protocol-partitions-count, :file "out/cljs/core.cljc", :line nil, :column nil, :end-line 741, :end-column 41, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 741, :column 6, :end-line 741, :end-column 41}, :doc "total number of partitions"}, - {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 957, :column 31, :end-line 957, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/-, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 957, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, extend-prefix {:name cljs.core$macros/extend-prefix, :file "out/cljs/core.cljc", :line nil, :column nil, :end-line 1282, :end-column 29, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1282, :column 16, :end-line 1282, :end-column 29}}, hash-set {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2289, :column 16, :end-line 2289, :end-column 24, :macro true, :arglists (quote ([] [& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/hash-set, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2289, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & xs])}, or {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 781, :column 16, :end-line 781, :end-column 18, :macro true, :arglists (quote ([] [x] [x & next])), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/or, :variadic true, :file "out/cljs/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}, :method-params ([&form &env] [&form &env x]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 781, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x & next]), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil."}, assert-args {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 603, :column 33, :end-line 603, :end-column 44, :private true, :macro true, :arglists (quote ([fnname & pairs])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnname pairs)], :arglists ([&form &env fnname & pairs]), :arglists-meta (nil)}}, :private true, :name cljs.core$macros/assert-args, :variadic true, :file "out/cljs/core.cljc", :end-column 44, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnname pairs)], :arglists ([&form &env fnname & pairs]), :arglists-meta (nil)}, :method-params [(&form &env fnname pairs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 603, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env fnname & pairs])}, extend-type {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1411, :column 16, :end-line 1411, :end-column 27, :macro true, :arglists (quote ([type-sym & impls])), :doc "Extend a type to a series of protocols. Useful when you are\n   supplying the definitions explicitly inline. Propagates the\n   type as a type hint on the first argument of all fns.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env type-sym impls)], :arglists ([&form &env type-sym & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/extend-type, :variadic true, :file "out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env type-sym impls)], :arglists ([&form &env type-sym & impls]), :arglists-meta (nil)}, :method-params [(&form &env type-sym impls)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1411, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env type-sym & impls]), :doc "Extend a type to a series of protocols. Useful when you are\n   supplying the definitions explicitly inline. Propagates the\n   type as a type hint on the first argument of all fns.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...))"}, cs {:name cljs.core$macros/cs, :file "out/cljs/core.cljc", :line nil, :column nil, :end-line 2464, :end-column 8, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2464, :column 6, :end-line 2464, :end-column 8}}, macroexpand-1 {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2551, :column 16, :end-line 2551, :end-column 29, :macro true, :arglists (quote ([quoted])), :doc "If form represents a macro form, returns its expansion,\n  else returns form."}, :name cljs.core$macros/macroexpand-1, :variadic false, :file "out/cljs/core.cljc", :end-column 29, :method-params ([&form &env quoted]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2551, :max-fixed-arity 3, :fn-var true, :arglists (quote ([quoted])), :doc "If form represents a macro form, returns its expansion,\n  else returns form."}, bit-test {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1066, :column 16, :end-line 1066, :end-column 24, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-test, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1066, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n]))}, defmethod {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2433, :column 16, :end-line 2433, :end-column 25, :macro true, :arglists (quote ([multifn dispatch-val & fn-tail])), :doc "Creates and installs a new method of multimethod associated with dispatch-value. ", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env multifn dispatch-val fn-tail)], :arglists ([&form &env multifn dispatch-val & fn-tail]), :arglists-meta (nil)}}, :name cljs.core$macros/defmethod, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env multifn dispatch-val fn-tail)], :arglists ([&form &env multifn dispatch-val & fn-tail]), :arglists-meta (nil)}, :method-params [(&form &env multifn dispatch-val fn-tail)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2433, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env multifn dispatch-val & fn-tail]), :doc "Creates and installs a new method of multimethod associated with dispatch-value. "}, time {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2438, :column 16, :end-line 2438, :end-column 20, :macro true, :arglists (quote ([expr])), :doc "Evaluates expr and prints the time it took. Returns the value of expr."}, :name cljs.core$macros/time, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([&form &env expr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2438, :max-fixed-arity 3, :fn-var true, :arglists (quote ([expr])), :doc "Evaluates expr and prints the time it took. Returns the value of expr."}, zero? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1009, :column 31, :end-line 1009, :end-column 36, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/zero?, :variadic false, :file "out/cljs/core.cljc", :end-column 36, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1009, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, unchecked-dec-int {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 924, :column 31, :end-line 924, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-dec-int, :variadic false, :file "out/cljs/core.cljc", :end-column 48, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 924, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, proto-assign-impls {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1356, :column 13, :end-line 1356, :end-column 31, :private true, :arglists (quote ([env resolve type-sym type [p sigs]]))}, :private true, :name cljs.core$macros/proto-assign-impls, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([env resolve type-sym type p__13285]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1356, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env resolve type-sym type [p sigs]]))}, memfn {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 373, :column 19, :end-line 373, :end-column 24, :macro true, :arglists (quote ([name & args])), :doc "Expands into code that creates a fn that expects to be passed an\n     object and any args and calls the named instance method on the\n     object passing the args. Use when you want to treat a Java method as\n     a first-class fn. name may be type-hinted with the method receiver's\n     type in order to avoid reflective calls.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}}, :name cljs.core$macros/memfn, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}, :method-params [(&form &env name args)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 373, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & args]), :doc "Expands into code that creates a fn that expects to be passed an\n     object and any args and calls the named instance method on the\n     object passing the args. Use when you want to treat a Java method as\n     a first-class fn. name may be type-hinted with the method receiver's\n     type in order to avoid reflective calls."}, parse-impls {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 189, :column 16, :end-line 189, :end-column 27, :private true, :arglists (quote ([specs]))}, :private true, :name cljs.core$macros/parse-impls, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, js-obj {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2312, :column 16, :end-line 2312, :end-column 22, :macro true, :arglists (quote ([& rest])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}}, :name cljs.core$macros/js-obj, :variadic true, :file "out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}, :method-params [(&form &env rest)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2312, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & rest])}, nil? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 799, :column 16, :end-line 799, :end-column 20, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/nil?, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 799, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, extend-protocol {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 205, :column 19, :end-line 205, :end-column 34, :macro true, :arglists (quote ([p & specs])), :doc "Useful when you want to provide several implementations of the same\n     protocol all at once. Takes a single protocol and the implementation\n     of that protocol for one or more types. Expands into calls to\n     extend-type:\n\n     (extend-protocol Protocol\n       AType\n         (foo [x] ...)\n         (bar [x y] ...)\n       BType\n         (foo [x] ...)\n         (bar [x y] ...)\n       AClass\n         (foo [x] ...)\n         (bar [x y] ...)\n       nil\n         (foo [x] ...)\n         (bar [x y] ...))\n\n     expands into:\n\n     (do\n      (clojure.core/extend-type AType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type BType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type AClass Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type nil Protocol\n        (foo [x] ...)\n        (bar [x y] ...)))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env p specs)], :arglists ([&form &env p & specs]), :arglists-meta (nil)}}, :name cljs.core$macros/extend-protocol, :variadic true, :file "out/cljs/core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env p specs)], :arglists ([&form &env p & specs]), :arglists-meta (nil)}, :method-params [(&form &env p specs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 205, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env p & specs]), :doc "Useful when you want to provide several implementations of the same\n     protocol all at once. Takes a single protocol and the implementation\n     of that protocol for one or more types. Expands into calls to\n     extend-type:\n\n     (extend-protocol Protocol\n       AType\n         (foo [x] ...)\n         (bar [x y] ...)\n       BType\n         (foo [x] ...)\n         (bar [x y] ...)\n       AClass\n         (foo [x] ...)\n         (bar [x y] ...)\n       nil\n         (foo [x] ...)\n         (bar [x y] ...))\n\n     expands into:\n\n     (do\n      (clojure.core/extend-type AType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type BType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type AClass Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type nil Protocol\n        (foo [x] ...)\n        (bar [x y] ...)))"}, cond-> {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 437, :column 19, :end-line 437, :end-column 25, :macro true, :arglists (quote ([expr & clauses])), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n     through each form for which the corresponding test\n     expression is true. Note that, unlike cond branching, cond-> threading does\n     not short circuit after the first true test expression.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/cond->, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 437, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & clauses]), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n     through each form for which the corresponding test\n     expression is true. Note that, unlike cond branching, cond-> threading does\n     not short circuit after the first true test expression."}, dotimes {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2363, :column 16, :end-line 2363, :end-column 23, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/dotimes, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2363, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1."}, bit-and {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1036, :column 31, :end-line 1036, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-and, :variadic true, :file "out/cljs/core.cljc", :end-column 38, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1036, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, reify {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1156, :column 16, :end-line 1156, :end-column 21, :macro true, :arglists (quote ([& impls])), :doc "reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (-seq f)))))\n  == (\\f \\o \\o))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env impls)], :arglists ([&form &env & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/reify, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env impls)], :arglists ([&form &env & impls]), :arglists-meta (nil)}, :method-params [(&form &env impls)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1156, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & impls]), :doc "reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (-seq f)))))\n  == (\\f \\o \\o))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}"}, do-curried {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1104, :column 13, :end-line 1104, :end-column 23, :private true, :arglists (quote ([name doc meta args body]))}, :private true, :name cljs.core$macros/do-curried, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([name doc meta args body]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1104, :max-fixed-arity 5, :fn-var true, :arglists (quote ([name doc meta args body]))}, instance? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 865, :column 16, :end-line 865, :end-column 25, :macro true, :arglists (quote ([t o]))}, :name cljs.core$macros/instance?, :variadic false, :file "out/cljs/core.cljc", :end-column 25, :method-params ([&form &env t o]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 865, :max-fixed-arity 4, :fn-var true, :arglists (quote ([t o]))}, load-file* {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2548, :column 16, :end-line 2548, :end-column 26, :macro true, :arglists (quote ([f]))}, :name cljs.core$macros/load-file*, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2548, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f]))}, defonce {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 599, :column 16, :end-line 599, :end-column 23, :macro true, :arglists (quote ([x init]))}, :name cljs.core$macros/defonce, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x init]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 599, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x init]))}, unchecked-add {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 915, :column 31, :end-line 915, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-add, :variadic true, :file "out/cljs/core.cljc", :end-column 44, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 915, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, rfn {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1128, :column 26, :end-line 1128, :end-column 29, :private true, :macro true, :arglists (quote ([[f1 k] fkv])), :doc "Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl."}, :private true, :name cljs.core$macros/rfn, :variadic false, :file "out/cljs/core.cljc", :end-column 29, :method-params ([&form &env p__13188 fkv]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1128, :max-fixed-arity 4, :fn-var true, :arglists (quote ([[f1 k] fkv])), :doc "Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl."}, identical? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 862, :column 16, :end-line 862, :end-column 26, :macro true, :arglists (quote ([a b]))}, :name cljs.core$macros/identical?, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env a b]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 862, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a b]))}, collect-protocols {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1480, :column 13, :end-line 1480, :end-column 30, :private true, :arglists (quote ([impls env]))}, :private true, :name cljs.core$macros/collect-protocols, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([impls env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1480, :max-fixed-arity 2, :fn-var true, :arglists (quote ([impls env]))}, unchecked-divide-int {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 927, :column 31, :end-line 927, :end-column 51, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-divide-int, :variadic true, :file "out/cljs/core.cljc", :end-column 51, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 927, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, defn- {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 325, :column 19, :end-line 325, :end-column 24, :macro true, :arglists (quote ([name & decls])), :doc "same as defn, yielding non-public def", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name decls)], :arglists ([&form &env name & decls]), :arglists-meta (nil)}}, :name cljs.core$macros/defn-, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name decls)], :arglists ([&form &env name & decls]), :arglists-meta (nil)}, :method-params [(&form &env name decls)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 325, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & decls]), :doc "same as defn, yielding non-public def"}, maybe-destructured {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 245, :column 4, :end-line 245, :end-column 22, :private true, :arglists (quote ([params body]))}, :private true, :name cljs.core$macros/maybe-destructured, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([params body]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 245, :max-fixed-arity 2, :fn-var true, :arglists (quote ([params body]))}, defprotocol {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1732, :column 16, :end-line 1732, :end-column 27, :macro true, :arglists (quote ([psym & doc+methods])), :doc "A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env psym doc+methods)], :arglists ([&form &env psym & doc+methods]), :arglists-meta (nil)}}, :name cljs.core$macros/defprotocol, :variadic true, :file "out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env psym doc+methods)], :arglists ([&form &env psym & doc+methods]), :arglists-meta (nil)}, :method-params [(&form &env psym doc+methods)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1732, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env psym & doc+methods]), :doc "A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17"}, unchecked-subtract {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 951, :column 31, :end-line 951, :end-column 49, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-subtract, :variadic true, :file "out/cljs/core.cljc", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 951, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, variadic-fn {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2620, :column 13, :end-line 2620, :end-column 24, :private true, :arglists (quote ([name meta [[arglist & body :as method] :as fdecl]]))}, :private true, :name cljs.core$macros/variadic-fn, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([name meta p__13747]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2620, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name meta [[arglist & body :as method] :as fdecl]]))}, gen-apply-to-helper {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2466, :column 13, :end-line 2466, :end-column 32, :private true, :arglists (quote ([] [n])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :private true, :name cljs.core$macros/gen-apply-to-helper, :variadic false, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2466, :max-fixed-arity 1, :fn-var true, :arglists ([] [n])}, ifn-invoke-methods {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1321, :column 13, :end-line 1321, :end-column 31, :private true, :arglists (quote ([type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/ifn-invoke-methods, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([type type-sym p__13259]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1321, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym [f & meths :as form]]))}, assert {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2079, :column 16, :end-line 2079, :end-column 22, :macro true, :arglists (quote ([x] [x message])), :doc "Evaluates expr and throws an exception if it does not evaluate to\n  logical true.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x message]), :arglists ([&form &env x] [&form &env x message]), :arglists-meta (nil nil)}}, :name cljs.core$macros/assert, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x message]), :arglists ([&form &env x] [&form &env x message]), :arglists-meta (nil nil)}, :method-params ([&form &env x] [&form &env x message]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2079, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x message]), :doc "Evaluates expr and throws an exception if it does not evaluate to\n  logical true."}, true? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 839, :column 16, :end-line 839, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/true?, :variadic false, :file "out/cljs/core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 839, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, array {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2236, :column 16, :end-line 2236, :end-column 21, :macro true, :arglists (quote ([& rest])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}}, :name cljs.core$macros/array, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}, :method-params [(&form &env rest)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2236, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & rest])}, multi-arity-fn? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2574, :column 13, :end-line 2574, :end-column 28, :private true, :arglists (quote ([fdecl]))}, :private true, :name cljs.core$macros/multi-arity-fn?, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2574, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl]))}, letfn {:protocol-inline nil, :meta {:special-form true, :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnspecs body)], :arglists ([&form &env fnspecs & body]), :arglists-meta (nil)}, :column 19, :line 359, :macro true, :url nil, :end-line 359, :arglists (quote ([fnspecs & body])), :doc "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n     Takes a vector of function specs and a body, and generates a set of\n     bindings of functions to their names. All of the names are available\n     in all of the definitions of the functions, as well as the body.", :forms (quote [(letfn [fnspecs*] exprs*)])}, :name cljs.core$macros/letfn, :variadic true, :special-form true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnspecs body)], :arglists ([&form &env fnspecs & body]), :arglists-meta (nil)}, :method-params [(&form &env fnspecs body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :url nil, :end-line 359, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env fnspecs & body]), :doc "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n     Takes a vector of function specs and a body, and generates a set of\n     bindings of functions to their names. All of the names are available\n     in all of the definitions of the functions, as well as the body.", :forms (quote [(letfn [fnspecs*] exprs*)])}, / {:protocol-inline nil, :meta {:cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :file nil}, :name cljs.core$macros//, :variadic true, :file "out/cljs/core.cljc", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, bitpos {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1089, :column 16, :end-line 1089, :end-column 22, :macro true, :arglists (quote ([hash shift]))}, :name cljs.core$macros/bitpos, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([&form &env hash shift]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1089, :max-fixed-arity 4, :fn-var true, :arglists (quote ([hash shift]))}, bit-or {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1045, :column 31, :end-line 1045, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-or, :variadic true, :file "out/cljs/core.cljc", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1045, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, vector {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2258, :column 16, :end-line 2258, :end-column 22, :macro true, :arglists (quote ([] [& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/vector, :variadic true, :file "out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2258, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & xs])}, adapt-obj-params {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1290, :column 13, :end-line 1290, :end-column 29, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-obj-params, :variadic false, :file "out/cljs/core.cljc", :end-column 29, :method-params ([type p__13231]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1290, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, >= {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 993, :column 31, :end-line 993, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/>=, :variadic true, :file "out/cljs/core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 993, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, loop {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 700, :column 16, :end-line 700, :end-column 20, :macro true, :arglists (quote ([bindings & body])), :doc "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/loop, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 700, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target."}, add-obj-methods {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1312, :column 13, :end-line 1312, :end-column 28, :private true, :arglists (quote ([type type-sym sigs]))}, :private true, :name cljs.core$macros/add-obj-methods, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([type type-sym sigs]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1312, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym sigs]))}, bit-flip {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1063, :column 31, :end-line 1063, :end-column 39, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-flip, :variadic false, :file "out/cljs/core.cljc", :end-column 39, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1063, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, js-mod {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1030, :column 31, :end-line 1030, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([num div]))}, :name cljs.core$macros/js-mod, :variadic false, :file "out/cljs/core.cljc", :end-column 37, :method-params ([&form &env num div]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1030, :max-fixed-arity 4, :fn-var true, :arglists (quote ([num div])), :cljs.analyzer/numeric true}, to-property {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1236, :column 13, :end-line 1236, :end-column 24, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.core$macros/to-property, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1236, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, variadic-fn* {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2581, :column 13, :end-line 2581, :end-column 25, :private true, :arglists (quote ([sym method] [sym [arglist & body :as method] solo])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([sym method] [sym [arglist & body :as method] solo]), :arglists ([sym method] [sym [arglist & body :as method] solo]), :arglists-meta (nil nil)}}, :private true, :name cljs.core$macros/variadic-fn*, :variadic false, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([sym method] [sym [arglist & body :as method] solo]), :arglists ([sym method] [sym [arglist & body :as method] solo]), :arglists-meta (nil nil)}, :method-params ([sym method] [sym [arglist & body :as method] solo]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2581, :max-fixed-arity 3, :fn-var true, :arglists ([sym method] [sym [arglist & body :as method] solo])}, with-out-str {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2491, :column 16, :end-line 2491, :end-column 28, :macro true, :arglists (quote ([& body])), :doc "Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/with-out-str, :variadic true, :file "out/cljs/core.cljc", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2491, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls."}, condp {:protocol-inline nil, :meta {:added "1.0", :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env pred expr clauses)], :arglists ([&form &env pred expr & clauses]), :arglists-meta (nil)}, :column 16, :line 1944, :macro true, :end-line 1944, :arglists (quote ([pred expr & clauses])), :doc "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown."}, :added "1.0", :name cljs.core$macros/condp, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env pred expr clauses)], :arglists ([&form &env pred expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env pred expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1944, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env pred expr & clauses]), :doc "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown."}, cond {:protocol-inline nil, :meta {:added "1.0", :file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env clauses)], :arglists ([&form &env & clauses]), :arglists-meta (nil)}, :column 19, :line 152, :macro true, :end-line 152, :arglists (quote ([& clauses])), :doc "Takes a set of test/expr pairs. It evaluates each test one at a\n     time.  If a test returns logical true, cond evaluates and returns\n     the value of the corresponding expr and doesn't evaluate any of the\n     other tests or exprs. (cond) returns nil."}, :added "1.0", :name cljs.core$macros/cond, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env clauses)], :arglists ([&form &env & clauses]), :arglists-meta (nil)}, :method-params [(&form &env clauses)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & clauses]), :doc "Takes a set of test/expr pairs. It evaluates each test one at a\n     time.  If a test returns logical true, cond evaluates and returns\n     the value of the corresponding expr and doesn't evaluate any of the\n     other tests or exprs. (cond) returns nil."}, check-valid-options {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2377, :column 13, :end-line 2377, :end-column 32, :private true, :arglists (quote ([options & valid-keys])), :doc "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(options valid-keys)], :arglists ([options & valid-keys]), :arglists-meta (nil)}}, :private true, :name cljs.core$macros/check-valid-options, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(options valid-keys)], :arglists ([options & valid-keys]), :arglists-meta (nil)}, :method-params [(options valid-keys)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 2377, :max-fixed-arity 1, :fn-var true, :arglists ([options & valid-keys]), :doc "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil."}, add-proto-methods* {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1344, :column 13, :end-line 1344, :end-column 31, :private true, :arglists (quote ([pprefix type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/add-proto-methods*, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([pprefix type type-sym p__13270]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1344, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pprefix type type-sym [f & meths :as form]]))}, some-> {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 475, :column 19, :end-line 475, :end-column 25, :macro true, :arglists (quote ([expr & forms])), :doc "When expr is not nil, threads it into the first form (via ->),\n     and when that result is not nil, through the next etc", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/some->, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr forms)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 475, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->),\n     and when that result is not nil, through the next etc"}, ns-interns {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2520, :column 16, :end-line 2520, :end-column 26, :macro true, :arglists (quote ([[quote ns]])), :doc "Returns a map of the intern mappings for the namespace."}, :name cljs.core$macros/ns-interns, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env p__13711]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2520, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[quote ns]])), :doc "Returns a map of the intern mappings for the namespace."}, base-assign-impls {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1271, :column 13, :end-line 1271, :end-column 30, :private true, :arglists (quote ([env resolve tsym type [p sigs]]))}, :private true, :name cljs.core$macros/base-assign-impls, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([env resolve tsym type p__13220]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1271, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env resolve tsym type [p sigs]]))}, for {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2093, :column 16, :end-line 2093, :end-column 19, :macro true, :arglists (quote ([seq-exprs body-expr])), :doc "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))"}, :name cljs.core$macros/for, :variadic false, :file "out/cljs/core.cljc", :end-column 19, :method-params ([&form &env seq-exprs body-expr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2093, :max-fixed-arity 4, :fn-var true, :arglists (quote ([seq-exprs body-expr])), :doc "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))"}, binding {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1931, :column 16, :end-line 1931, :end-column 23, :macro true, :arglists (quote ([bindings & body])), :doc "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/binding, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1931, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values."}, array-map {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2269, :column 16, :end-line 2269, :end-column 25, :macro true, :arglists (quote ([] [& kvs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/array-map, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2269, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & kvs])}, unchecked-byte {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 909, :column 16, :end-line 909, :end-column 30, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-byte, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 909, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, defmacro {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2788, :column 12, :end-line 2788, :end-column 20, :arglists (quote ([name doc-string? attr-map? [params*] body] [name doc-string? attr-map? ([params*] body) + attr-map?])), :doc "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.", :macro true, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}}, :name cljs.core$macros/defmacro, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}, :method-params [(&form &env name args)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2788, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & args]), :doc "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called."}, unchecked-short {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 911, :column 16, :end-line 911, :end-column 31, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-short, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 911, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, validate-fields {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1495, :column 13, :end-line 1495, :end-column 28, :private true, :arglists (quote ([case name fields]))}, :private true, :name cljs.core$macros/validate-fields, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([case name fields]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1495, :max-fixed-arity 3, :fn-var true, :arglists (quote ([case name fields]))}, inc {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1006, :column 31, :end-line 1006, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/inc, :variadic false, :file "out/cljs/core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1006, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, with-redefs {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1909, :column 16, :end-line 1909, :end-column 27, :macro true, :arglists (quote ([bindings & body])), :doc "binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/with-redefs, :variadic true, :file "out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1909, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing."}, bit-clear {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1060, :column 31, :end-line 1060, :end-column 40, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-clear, :variadic false, :file "out/cljs/core.cljc", :end-column 40, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1060, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, list {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2253, :column 16, :end-line 2253, :end-column 20, :macro true, :arglists (quote ([] [x & xs])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env]), :arglists ([&form &env] [&form &env x & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/list, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env]), :arglists ([&form &env] [&form &env x & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2253, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env] [&form &env x & xs])}, + {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 898, :column 31, :end-line 898, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([] [x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core$macros/+, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([&form &env] [&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :macro true, :end-line 898, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, aset {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 890, :column 16, :end-line 890, :end-column 20, :macro true, :arglists (quote ([a i v] [a idx idx2 & idxv])), :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env a i v]), :arglists ([&form &env a i v] [&form &env a idx idx2 & idxv]), :arglists-meta (nil nil)}}, :name cljs.core$macros/aset, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env a i v]), :arglists ([&form &env a i v] [&form &env a idx idx2 & idxv]), :arglists-meta (nil nil)}, :method-params ([&form &env a i v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 890, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env a i v] [&form &env a idx idx2 & idxv])}, destructure {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 617, :column 12, :end-line 617, :end-column 23, :arglists (quote ([bindings]))}, :name cljs.core$macros/destructure, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([bindings]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 617, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bindings]))}, defmulti {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2387, :column 16, :end-line 2387, :end-column 24, :macro true, :arglists (quote ([mm-name & options])), :doc "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env mm-name options)], :arglists ([&form &env mm-name & options]), :arglists-meta (nil)}}, :name cljs.core$macros/defmulti, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env mm-name options)], :arglists ([&form &env mm-name & options]), :arglists-meta (nil)}, :method-params [(&form &env mm-name options)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2387, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env mm-name & options]), :doc "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy"}, str {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 749, :column 16, :end-line 749, :end-column 19, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/str, :variadic true, :file "out/cljs/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 749, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs])}, coercive-= {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 811, :column 16, :end-line 811, :end-column 26, :macro true, :arglists (quote ([x y]))}, :name cljs.core$macros/coercive-=, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 811, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y]))}, hash-map {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2279, :column 16, :end-line 2279, :end-column 24, :macro true, :arglists (quote ([] [& kvs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/hash-map, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2279, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & kvs])}, if-let {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 331, :column 19, :end-line 331, :end-column 25, :macro true, :arglists (quote ([bindings then] [bindings then else & oldform])), :doc "bindings => binding-form test\n\n     If test is true, evaluates then with binding-form bound to the value of\n     test, if not, yields else", :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-let, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}, :method-params ([&form &env bindings then]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 331, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :doc "bindings => binding-form test\n\n     If test is true, evaluates then with binding-form bound to the value of\n     test, if not, yields else"}, add-ifn-methods {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1329, :column 13, :end-line 1329, :end-column 28, :private true, :arglists (quote ([type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/add-ifn-methods, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([type type-sym p__13267]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1329, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym [f & meths :as form]]))}, false? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 842, :column 16, :end-line 842, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/false?, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 842, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, case {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2008, :column 16, :end-line 2008, :end-column 20, :macro true, :arglists (quote ([e & clauses])), :doc "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env e clauses)], :arglists ([&form &env e & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/case, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env e clauses)], :arglists ([&form &env e & clauses]), :arglists-meta (nil)}, :method-params [(&form &env e clauses)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2008, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env e & clauses]), :doc "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type."}, exists? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 849, :column 16, :end-line 849, :end-column 23, :macro true, :arglists (quote ([x])), :doc "Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript."}, :name cljs.core$macros/exists?, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 849, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :doc "Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript."}, bit-not {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1033, :column 31, :end-line 1033, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/bit-not, :variadic false, :file "out/cljs/core.cljc", :end-column 38, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 1033, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, byte {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 904, :column 16, :end-line 904, :end-column 20, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/byte, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 904, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, max {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1018, :column 31, :end-line 1018, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/max, :variadic true, :file "out/cljs/core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 1018, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, == {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 998, :column 31, :end-line 998, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/==, :variadic true, :file "out/cljs/core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 998, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, lazy-cat {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2502, :column 16, :end-line 2502, :end-column 24, :macro true, :arglists (quote ([& colls])), :doc "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed. \n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env colls)], :arglists ([&form &env & colls]), :arglists-meta (nil)}}, :name cljs.core$macros/lazy-cat, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env colls)], :arglists ([&form &env & colls]), :arglists-meta (nil)}, :method-params [(&form &env colls)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 2502, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & colls]), :doc "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed. \n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))"}, comment {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 147, :column 19, :end-line 147, :end-column 26, :macro true, :arglists (quote ([& body])), :doc "Ignores body, yields nil", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/comment, :variadic true, :file "out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Ignores body, yields nil"}, warn-and-update-protocol {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1239, :column 13, :end-line 1239, :end-column 37, :private true, :arglists (quote ([p type env]))}, :private true, :name cljs.core$macros/warn-and-update-protocol, :variadic false, :file "out/cljs/core.cljc", :end-column 37, :method-params ([p type env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1239, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p type env]))}, copy-arguments {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2613, :column 16, :end-line 2613, :end-column 30, :macro true, :arglists (quote ([dest]))}, :name cljs.core$macros/copy-arguments, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([&form &env dest]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2613, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dest]))}, defrecord {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1663, :column 16, :end-line 1663, :end-column 25, :macro true, :arglists (quote ([rsym fields & impls])), :doc "(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env rsym fields impls)], :arglists ([&form &env rsym fields & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/defrecord, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env rsym fields impls)], :arglists ([&form &env rsym fields & impls]), :arglists-meta (nil)}, :method-params [(&form &env rsym fields impls)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 1663, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env rsym fields & impls]), :doc "(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values."}, make-array {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 2245, :column 16, :end-line 2245, :end-column 26, :macro true, :arglists (quote ([size]))}, :name cljs.core$macros/make-array, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env size]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 2245, :max-fixed-arity 3, :fn-var true, :arglists (quote ([size]))}, unchecked-negate-int {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 945, :column 31, :end-line 945, :end-column 51, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-negate-int, :variadic false, :file "out/cljs/core.cljc", :end-column 51, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 945, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, simple-test-expr? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 758, :column 13, :end-line 758, :end-column 30, :private true, :arglists (quote ([env ast]))}, :private true, :name cljs.core$macros/simple-test-expr?, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([env ast]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 758, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env ast]))}, unchecked-inc {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 930, :column 31, :end-line 930, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-inc, :variadic false, :file "out/cljs/core.cljc", :end-column 44, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 930, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, and {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 763, :column 16, :end-line 763, :end-column 19, :macro true, :arglists (quote ([] [x] [x & next])), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/and, :variadic true, :file "out/cljs/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}, :method-params ([&form &env] [&form &env x]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :macro true, :end-line 763, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x & next]), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true."}, number? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 874, :column 16, :end-line 874, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/number?, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 874, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, assoc-test {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1986, :column 13, :end-line 1986, :end-column 23, :private true, :arglists (quote ([m test expr env]))}, :private true, :name cljs.core$macros/assoc-test, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([m test expr env]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1986, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m test expr env]))}, validate-impls {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1393, :column 13, :end-line 1393, :end-column 27, :private true, :arglists (quote ([env impls]))}, :private true, :name cljs.core$macros/validate-impls, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([env impls]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1393, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env impls]))}, symbol? {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 877, :column 16, :end-line 877, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/symbol?, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 877, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, when-some {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 517, :column 19, :end-line 517, :end-column 28, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => binding-form test\n\n      When test is not nil, evaluates body with binding-form bound to the\n      value of test", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-some, :variadic true, :file "out/cljs/core.cljc", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 517, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => binding-form test\n\n      When test is not nil, evaluates body with binding-form bound to the\n      value of test"}, unchecked-char {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 910, :column 16, :end-line 910, :end-column 30, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-char, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :macro true, :end-line 910, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, ->> {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 113, :column 19, :end-line 113, :end-column 22, :macro true, :arglists (quote ([x & forms])), :doc "Threads the expr through the forms. Inserts x as the\n     last item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     last item in second form, etc.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/->>, :variadic true, :file "out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :macro true, :end-line 113, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env x & forms]), :doc "Threads the expr through the forms. Inserts x as the\n     last item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     last item in second form, etc."}, dt->et {:protocol-inline nil, :meta {:file "/Users/frankie/Documents/clojure/replete/ClojureScript/replete/out/cljs/core.cljc", :line 1463, :column 12, :end-line 1463, :end-column 18, :arglists (quote ([type specs fields] [type specs fields inline])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([type specs fields] [type specs fields inline]), :arglists ([type specs fields] [type specs fields inline]), :arglists-meta (nil nil)}}, :name cljs.core$macros/dt->et, :variadic false, :file "out/cljs/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([type specs fields] [type specs fields inline]), :arglists ([type specs fields] [type specs fields inline]), :arglists-meta (nil nil)}, :method-params ([type specs fields] [type specs fields inline]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1463, :max-fixed-arity 4, :fn-var true, :arglists ([type specs fields] [type specs fields inline])}}, :require-macros {core cljs.core, cljs.core cljs.core}, :cljs.analyzer/constants {:seen #{:extending-base-js-type :cljs.analyzer/namespaces :js :fname :let :cljs.core$macros/not-found :invalid-protocol-symbol :pre :instance :private :extend :else :when :protocol-duped-method :protocol-symbol :protocol :locals :method :default :protocols :ns :name :as :variadic :constant :or :file :end-column :top-fn :method-params :op :current-symbol :>> :cljs.analyzer/type :syms :arglists-meta :cljs.analyzer/protocol-inline :anonymous :column :cljs.analyzer/protocol-impl :internal-ctor :positional :factory :const :keys :methods :undeclared-protocol-symbol :undeclared :line :var :protocol-info :macro :deprecation-nowarn :deprecated :defs :declared :end-line :cljs.analyzer/no-resolve :invoke :print-fn :post :no-such-method :max-fixed-arity :tag :dot :protocol-deprecated :mutable :while :arglists :skip-protocol-flag :impls :hierarchy :doc :protocol-multiple-impls :protocol-invalid-method :invalid-arity :extend-type-invalid-method-shape :suggested-symbol :map :strs}, :order [:declared :pre :post :private :as :else :or :keys :strs :syms :tag :js :constant :var :invoke :dot :op :cljs.analyzer/no-resolve :anonymous :locals :name :ns :extend :instance :protocol-symbol :invalid-protocol-symbol :protocol :protocol-deprecated :deprecated :deprecation-nowarn :cljs.analyzer/namespaces :defs :impls :undeclared :undeclared-protocol-symbol :hierarchy :default :skip-protocol-flag :methods :protocol-info :cljs.core$macros/not-found :protocol-invalid-method :fname :no-such-method :protocol-duped-method :invalid-arity :protocol-multiple-impls :extend-type-invalid-method-shape :method :extending-base-js-type :current-symbol :suggested-symbol :cljs.analyzer/type :cljs.analyzer/protocol-impl :cljs.analyzer/protocol-inline :factory :positional :internal-ctor :protocols :mutable :map :doc :>> :line :const :let :while :when :file :column :end-line :end-column :print-fn :top-fn :variadic :max-fixed-arity :method-params :arglists :arglists-meta :macro]}, :doc nil}